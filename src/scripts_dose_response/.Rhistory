second_opt$par <- second_opt$estimate
}
if(second_opt$convergence != 0){
second_opt <- nlm(f = fit_dose_response_model_course,
p = as.numeric(next_params$start),
env_data = measurement_list,
control_data = control_data,
names_params = names_params,
.response_function. = .response_function.,
hessian = T,
iterlim = 100)
second_opt$par <- second_opt$estimate
}
# calculate SE or use a ratio (0.5) and optimize with BBoptim
hessian.inv <- try(solve(second_opt$hessian),silent = T)
if(any(class(hessian.inv) == "matrix")){
parameter.se <- sqrt(diag(abs(hessian.inv)))
next_params <- list( "lower" = second_opt$par -parameter.se,
"start" = second_opt$par,
"upper" = second_opt$par + parameter.se)
}else{
next_params <- get_boundaries(second_opt$par,deviation_ratio = 0.5)
}
require(BB)
opt_df <- BB::BBoptim(par = as.numeric(next_params$start),
fn = fit_dose_response_model_course,
env_data = measurement_list,
control_data = control_data,
names_params = names_params,
.response_function. = .response_function.,
method = c(3,2,1),
lower = as.numeric(next_params$lower),
upper = as.numeric(next_params$upper),
control = list(trace = 1,
maxit=(100*length(next_params$start))))
opt_df[[paste0("mean_",env_variable)]] <- as.numeric(unlist(lapply(measurement_list, mean)))
names(opt_df$par) <- names_params
opt_df$growth_modelled <- as.numeric(unlist(lapply(measurement_list, .response_function., opt_df$par)))
opt_df$growth_measured <- control_data
if(opt_df$convergence != 0){
opt_df$par <- rep(NA,length(starting_params))
}
rm(random_sample, measurement_list)
return(opt_df)
}
# paralellization
numCores <- min(detectCores(),length(repetitions))
cl <- makePSOCKcluster(numCores)
start_time <- Sys.time()
output <- parallel::parLapplyLB(cl,
repetitions,
looper_model_fit_function,
one_measurement_unit = combined_measurement_list,
env_variable = env_variable,
parameter_list = parameter_list,
.response_function. = .response_function.,
random_smaple_size = 0.8)
stopCluster(cl)
end_time <- Sys.time()
print(paste("modelfitting  done for:", response_curve_type,env_variable,sep=" "))
print(end_time - start_time)
source(paste0(path_script_base,"/functions/FUN_dose_response_fitting.R"))
numCores <- min(detectCores(),length(repetitions))
cl <- makePSOCKcluster(numCores)
start_time <- Sys.time()
output <- parallel::parLapplyLB(cl,
repetitions,
looper_model_fit_function,
one_measurement_unit = combined_measurement_list,
env_variable = env_variable,
parameter_list = parameter_list,
.response_function. = .response_function.,
random_smaple_size = 0.8)
# opt_df <- lapply(repetitions,
#                                 looper_model_fit_function,
#                                 one_measurement_unit = combined_measurement_list,
#                                 env_variable = env_variable,
#                                 parameter_list = parameter_list,
#                                 .response_function. = .response_function.,
#                                 random_smaple_size = 0.8)
stopCluster(cl)
end_time <- Sys.time()
print(paste("modelfitting  done for:", response_curve_type,env_variable,sep=" "))
print(end_time - start_time)
################################################################################
# function#
###############################################################################
looper_model_fit_function <- function(rep,
one_measurement_unit,
env_variable,
parameter_list,
.response_function.,
random_smaple_size = 0.8){
#'@param one_measurement_unit dataframe containing values of one measurement unit (e.g. plot, genotype etc...)
#'@param env_variable environmental varaible (eg. temp)
#'@param parameter_list list with all input aprameters
#'@param parameters_method decide wheter you want to erstimate the first guess of the input parameters or not (if yes no iterations will be done but 100% of the data will be used --> faster process)
#'@param .response_function. a function, which will be used to optimize (non_linear, negative_quadratic etc.)
require(parallel)
# require(rgenoud)
source(paste0(path_script_base,"/functions/FUN_dose_response_fitting.R"))
# make fitting more robust: run over 80 percent over the data, 20 times get median of this
# set iterations and samplesize
# if we fit the modell, we take 20 repetitions with 80 percent of the data each repetitions
# repetitions <- c(1:20)
# random_smaple_size <- 0.8
get_boundaries <- function(parameters_numeric, deviation_ratio){
lower <- NULL
upper <- NULL
for(par in 1 :length(parameters_numeric)){
deviation <- abs(parameters_numeric[par]) * (deviation_ratio)
lower[par] <- parameters_numeric[par] - deviation
upper[par] <- parameters_numeric[par] + deviation
}
return(list(lower= lower, start = parameters_numeric, upper = upper ))
}
# extract parameters fromparameter list
lower_bounds <- lapply(parameter_list, "[[",1)
starting_params <- lapply(parameter_list, "[[",2)
upper_bounds <- lapply(parameter_list, "[[",3)
names_params <- names(starting_params)
opt_df <- list()
# for(rep in repetitions){
random_sample <- sample(x=c(1:length(one_measurement_unit)), size = ceiling(length(one_measurement_unit)*random_smaple_size))
measurement_list <- one_measurement_unit[random_sample]
measurement_list <- lapply(measurement_list, function(x) x[!is.na(x)])
# control_data <- rep(100,length(names(measurement_list)))
control_data <- as.numeric(names(measurement_list))
first_optim <- try(optim(par = as.numeric(starting_params),
fn = fit_dose_response_model_course,
env_data = measurement_list,
control_data = control_data,
names_params = names_params,
.response_function. = .response_function.,
method = "BFGS", hessian = T,
control = list(trace = 1,
maxit =40,
ndeps = rep(1,length(starting_params)))), silent = T)
first_nlm <- nlm(f = fit_dose_response_model_course,
p = as.numeric(starting_params),
env_data = measurement_list,
control_data = control_data,
names_params = names_params,
.response_function. = .response_function.,
hessian = T,
iterlim = 50,
steptol = 1e-2)
# find better method
methods <- c("optim","nlm")
if(class(first_optim) == "list"){
method = methods[which.min(c(first_optim$value,first_nlm$minimum))]
if(first_nlm$code > 1){
method = "optim"
}
}else{
method = "nlm"
if(first_nlm$code> 3){
first_nlm <- nlm(f = fit_dose_response_model_course,
p = as.numeric(starting_params),
env_data = measurement_list,
control_data = control_data,
names_params = names_params,
.response_function. = .response_function.,
hessian = T,
iterlim = 100)
}
}
if(method == "optim"){
next_params <- get_boundaries(first_optim$par,deviation_ratio = 1)
}else if( method == "nlm"){
next_params <- get_boundaries(first_nlm$estimate,deviation_ratio = 1)
}
# second partial optimization without boundaries
second_opt <- try(optim(par = as.numeric(next_params$start),
fn = fit_dose_response_model_course,
env_data = measurement_list,
control_data = control_data,
names_params = names_params,
.response_function. = .response_function.,
lower = as.numeric(next_params$lower),
upper = as.numeric(next_params$upper),
method = "L-BFGS-B",
hessian = T,
control = list(trace = 1,
maxit = 100,
ndeps = rep(1e-1,length(starting_params)))),silent=TRUE)
if(class(second_opt) == "try-error" ){
rm(second_opt)
second_opt <- nlm(f = fit_dose_response_model_course,
p = as.numeric(next_params$start),
env_data = measurement_list,
control_data = control_data,
names_params = names_params,
.response_function. = .response_function.,
hessian = T,
iterlim = 50)
second_opt$convergence <- ifelse(second_opt$code <=2 ,0, 1)
second_opt$par <- second_opt$estimate
}
if(second_opt$convergence != 0){
second_opt <- nlm(f = fit_dose_response_model_course,
p = as.numeric(next_params$start),
env_data = measurement_list,
control_data = control_data,
names_params = names_params,
.response_function. = .response_function.,
hessian = T,
iterlim = 100)
second_opt$par <- second_opt$estimate
}
# calculate SE or use a ratio (0.5) and optimize with BBoptim
hessian.inv <- try(solve(second_opt$hessian),silent = T)
if(any(class(hessian.inv) == "matrix")){
parameter.se <- sqrt(diag(abs(hessian.inv)))
next_params <- list( "lower" = second_opt$par -parameter.se,
"start" = second_opt$par,
"upper" = second_opt$par + parameter.se)
}else{
next_params <- get_boundaries(second_opt$par,deviation_ratio = 0.5)
}
require(BB)
opt_df <- BB::BBoptim(par = as.numeric(next_params$start),
fn = fit_dose_response_model_course,
env_data = measurement_list,
control_data = control_data,
names_params = names_params,
.response_function. = .response_function.,
method = c(3,2,1),
lower = as.numeric(next_params$lower),
upper = as.numeric(next_params$upper),
control = list(trace = 1,
maxit=(100*length(next_params$start))))
opt_df[[paste0("mean_",env_variable)]] <- as.numeric(unlist(lapply(measurement_list, mean)))
names(opt_df$par) <- names_params
opt_df$growth_modelled <- as.numeric(unlist(lapply(measurement_list, .response_function., opt_df$par)))
opt_df$growth_measured <- control_data
if(opt_df$convergence != 0){
opt_df$par <- rep(NA,length(starting_params))
}
rm(random_sample, measurement_list)
return(opt_df)
}
# paralellization
numCores <- min(detectCores(),length(repetitions))
cl <- makePSOCKcluster(numCores)
start_time <- Sys.time()
output <- parallel::parLapplyLB(cl,
repetitions,
looper_model_fit_function,
one_measurement_unit = combined_measurement_list,
env_variable = env_variable,
parameter_list = parameter_list,
.response_function. = .response_function.,
random_smaple_size = 0.8)
# opt_df <- lapply(repetitions,
#                                 looper_model_fit_function,
#                                 one_measurement_unit = combined_measurement_list,
#                                 env_variable = env_variable,
#                                 parameter_list = parameter_list,
#                                 .response_function. = .response_function.,
#                                 random_smaple_size = 0.8)
stopCluster(cl)
end_time <- Sys.time()
print(paste("modelfitting  done for:", response_curve_type,env_variable,sep=" "))
print(end_time - start_time)
################################################################################
# function#
###############################################################################
looper_model_fit_function <- function(rep,
one_measurement_unit,
env_variable,
parameter_list,
.response_function.,
random_smaple_size = 0.8){
#'@param one_measurement_unit dataframe containing values of one measurement unit (e.g. plot, genotype etc...)
#'@param env_variable environmental varaible (eg. temp)
#'@param parameter_list list with all input aprameters
#'@param parameters_method decide wheter you want to erstimate the first guess of the input parameters or not (if yes no iterations will be done but 100% of the data will be used --> faster process)
#'@param .response_function. a function, which will be used to optimize (non_linear, negative_quadratic etc.)
require(parallel)
# require(rgenoud)
source(paste0(getwd(),"/functions/FUN_dose_response_fitting.R"))
# make fitting more robust: run over 80 percent over the data, 20 times get median of this
# set iterations and samplesize
# if we fit the modell, we take 20 repetitions with 80 percent of the data each repetitions
# repetitions <- c(1:20)
# random_smaple_size <- 0.8
get_boundaries <- function(parameters_numeric, deviation_ratio){
lower <- NULL
upper <- NULL
for(par in 1 :length(parameters_numeric)){
deviation <- abs(parameters_numeric[par]) * (deviation_ratio)
lower[par] <- parameters_numeric[par] - deviation
upper[par] <- parameters_numeric[par] + deviation
}
return(list(lower= lower, start = parameters_numeric, upper = upper ))
}
# extract parameters fromparameter list
lower_bounds <- lapply(parameter_list, "[[",1)
starting_params <- lapply(parameter_list, "[[",2)
upper_bounds <- lapply(parameter_list, "[[",3)
names_params <- names(starting_params)
opt_df <- list()
# for(rep in repetitions){
random_sample <- sample(x=c(1:length(one_measurement_unit)), size = ceiling(length(one_measurement_unit)*random_smaple_size))
measurement_list <- one_measurement_unit[random_sample]
measurement_list <- lapply(measurement_list, function(x) x[!is.na(x)])
# control_data <- rep(100,length(names(measurement_list)))
control_data <- as.numeric(names(measurement_list))
first_optim <- try(optim(par = as.numeric(starting_params),
fn = fit_dose_response_model_course,
env_data = measurement_list,
control_data = control_data,
names_params = names_params,
.response_function. = .response_function.,
method = "BFGS", hessian = T,
control = list(trace = 1,
maxit =40,
ndeps = rep(1,length(starting_params)))), silent = T)
first_nlm <- nlm(f = fit_dose_response_model_course,
p = as.numeric(starting_params),
env_data = measurement_list,
control_data = control_data,
names_params = names_params,
.response_function. = .response_function.,
hessian = T,
iterlim = 50,
steptol = 1e-2)
# find better method
methods <- c("optim","nlm")
if(class(first_optim) == "list"){
method = methods[which.min(c(first_optim$value,first_nlm$minimum))]
if(first_nlm$code > 1){
method = "optim"
}
}else{
method = "nlm"
if(first_nlm$code> 3){
first_nlm <- nlm(f = fit_dose_response_model_course,
p = as.numeric(starting_params),
env_data = measurement_list,
control_data = control_data,
names_params = names_params,
.response_function. = .response_function.,
hessian = T,
iterlim = 100)
}
}
if(method == "optim"){
next_params <- get_boundaries(first_optim$par,deviation_ratio = 1)
}else if( method == "nlm"){
next_params <- get_boundaries(first_nlm$estimate,deviation_ratio = 1)
}
# second partial optimization without boundaries
second_opt <- try(optim(par = as.numeric(next_params$start),
fn = fit_dose_response_model_course,
env_data = measurement_list,
control_data = control_data,
names_params = names_params,
.response_function. = .response_function.,
lower = as.numeric(next_params$lower),
upper = as.numeric(next_params$upper),
method = "L-BFGS-B",
hessian = T,
control = list(trace = 1,
maxit = 100,
ndeps = rep(1e-1,length(starting_params)))),silent=TRUE)
if(class(second_opt) == "try-error" ){
rm(second_opt)
second_opt <- nlm(f = fit_dose_response_model_course,
p = as.numeric(next_params$start),
env_data = measurement_list,
control_data = control_data,
names_params = names_params,
.response_function. = .response_function.,
hessian = T,
iterlim = 50)
second_opt$convergence <- ifelse(second_opt$code <=2 ,0, 1)
second_opt$par <- second_opt$estimate
}
if(second_opt$convergence != 0){
second_opt <- nlm(f = fit_dose_response_model_course,
p = as.numeric(next_params$start),
env_data = measurement_list,
control_data = control_data,
names_params = names_params,
.response_function. = .response_function.,
hessian = T,
iterlim = 100)
second_opt$par <- second_opt$estimate
}
# calculate SE or use a ratio (0.5) and optimize with BBoptim
hessian.inv <- try(solve(second_opt$hessian),silent = T)
if(any(class(hessian.inv) == "matrix")){
parameter.se <- sqrt(diag(abs(hessian.inv)))
next_params <- list( "lower" = second_opt$par -parameter.se,
"start" = second_opt$par,
"upper" = second_opt$par + parameter.se)
}else{
next_params <- get_boundaries(second_opt$par,deviation_ratio = 0.5)
}
require(BB)
opt_df <- BB::BBoptim(par = as.numeric(next_params$start),
fn = fit_dose_response_model_course,
env_data = measurement_list,
control_data = control_data,
names_params = names_params,
.response_function. = .response_function.,
method = c(3,2,1),
lower = as.numeric(next_params$lower),
upper = as.numeric(next_params$upper),
control = list(trace = 1,
maxit=(100*length(next_params$start))))
opt_df[[paste0("mean_",env_variable)]] <- as.numeric(unlist(lapply(measurement_list, mean)))
names(opt_df$par) <- names_params
opt_df$growth_modelled <- as.numeric(unlist(lapply(measurement_list, .response_function., opt_df$par)))
opt_df$growth_measured <- control_data
if(opt_df$convergence != 0){
opt_df$par <- rep(NA,length(starting_params))
}
rm(random_sample, measurement_list)
return(opt_df)
}
# paralellization
numCores <- min(detectCores(),length(repetitions))
cl <- makePSOCKcluster(numCores)
start_time <- Sys.time()
output <- parallel::parLapplyLB(cl,
repetitions,
looper_model_fit_function,
one_measurement_unit = combined_measurement_list,
env_variable = env_variable,
parameter_list = parameter_list,
.response_function. = .response_function.,
random_smaple_size = 0.8)
# opt_df <- lapply(repetitions,
#                                 looper_model_fit_function,
#                                 one_measurement_unit = combined_measurement_list,
#                                 env_variable = env_variable,
#                                 parameter_list = parameter_list,
#                                 .response_function. = .response_function.,
#                                 random_smaple_size = 0.8)
stopCluster(cl)
end_time <- Sys.time()
print(paste("modelfitting  done for:", response_curve_type,env_variable,sep=" "))
print(end_time - start_time)
output
View(output)
get_median_of_parameters <- function(one_output){
#'@param one_output output list of the optimized paramters
#'@description calculated the median of the given input paramters and returns it
if(length(one_output[[1]])==1){
# browser()
return(NA)
}
params_list <- list()
for(param in c(1:length(one_output[[1]]$par))){
out_vect <- NULL
for (i in 1:length(one_output)) {
out_vect[i] <- one_output[[i]]$par[param]
}
params_list[[param]] <- median(out_vect,na.rm = T)
}
returner <- unlist(params_list)
return(unlist(params_list))
}
get_min_mean_median_max_of_parameters <- function(one_output){
#'@param one_output output list of the optimized paramters
#'@description calculated the median of the given input paramters and returns it
# browser()
if(length(one_output[[1]])==1){
return(NA)
}
params_list <- list()
for(param in c(1:length(one_output[[1]]$par))){
out_vect <- NULL
for (i in 1:length(one_output)) {
out_vect[i] <- one_output[[i]]$par[param]
}
params_list[[param]] <- c('min' = min(out_vect,na.rm=T), 'mean' = mean(out_vect,na.rm=T) , 'median' = median(out_vect,na.rm=T) , 'max' = max(out_vect,na.rm=T))
}
returner <- unlist(params_list)
return(unlist(params_list))
}
# create meta information before saving
meta_info <- list()
meta_info[["response_curve_type"]] <- response_curve_type
meta_info[["env_variable"]] <- env_variable
meta_info[["parameter_list"]] <- parameter_list
meta_info[["additional_description"]] <-"20 times optimized over 80% of the data"
# calculate median
median_output<- list()
median_output[[paste(env_variable,response_curve_type,sep="-")]] <- get_median_of_parameters(output)
median_output[["meta"]] <- meta_info
all_statistics_output <- list()
all_statistics_output[[paste(env_variable,response_curve_type,sep="-")]] <- get_min_mean_median_max_of_parameters(output)
all_statistics_output[["meta"]] <- meta_info
all_statistics_output
median_output
combined_output <- list()
combined_output[["median_output"]] <- median_output
combined_output[["complete_output"]] <- output
combined_output[["parameter_range_output"]] <- all_statistics_output
output_path_base
getwd()
# crate directory
output_path_base <- paste0(base_path_data,"/output/parameter_model/",response_curve_type)
dir.create(output_path_base,recursive = T, showWarnings = F)
out_file_name <- paste0(response_curve_type,"_parameter_" , env_variable,".rds")
saveRDS(combined_output, file= paste0(output_path_base,"/",out_file_name))
non_linear_parameter_T_mean_location_CH_Bramenwies <- readRDS("O:/Projects/KP0030_ftschurr/GIT_repos/scripts_paper_3/results/dose_reponse_in-situ/output/parameter_model/non_linear/non_linear_parameter_T_mean_location_CH_Bramenwies.rds")
View(non_linear_parameter_T_mean_location_CH_Bramenwies)
